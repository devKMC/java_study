package ch03; // 9일차 - 01

import java.io.ObjectInputStream.GetField;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;

public class B_Package2 {

	public static void main(String[] args) {

		// Math 클래스: 수학 연산과 관련된 다양한 메서드를 제공해주는 클래스
		
		// 절대값 메서드 : abs()
		System.out.println(Math.abs(-10.34));

		// ★올림값 메서드 : ceil() 
		System.out.println(Math.ceil(3.344));
		
		// ★내림값 메서드: floor()
		System.out.println(Math.floor(3.14));
		
		// ★반올림값 메서드 : round()
		System.out.println(Math.round(3.14));
		
		//특정 소수점 자리수에서 올림, 내림, 반올림
		System.out.println(Math.round(3.1415 *100) / 10.0); //소수점 세번째자리에서 반올림
		
		//최소값 메서드: min;
		System.out.println(Math.min(10, 20));
		
		//최대값 메서드: max()
		System.out.println(Math.max(10, 40));
		
		//거듭제곱 메서드: pow()
		System.out.println(Math.pow(10, 3));
		
		//제곱근값 메서드: sqrt()
		System.out.println(Math.sqrt(100));
		
		// Random 클래스: 난수를 생성해주는 클래스	
		Random random = new Random();  			//(시드값) 넣으면 고정 됨
		System.out.println(random.nextInt());	
		// Random 에서의 범위 제약
		System.out.println(random.nextInt(45));
		System.out.println(random.nextInt()% 45);	//음수 표현 방법
		
		// Lotto: 1~ 45 까지의 수 중복없이 6개의 수  set은 중복을 허용하지 않음
		
	
//		Set<Integer> lotto = new HashSet<>();		
		Set<Integer> lotto = new TreeSet<>();	  //정렬 되는것으로 사용하면 정렬됨
		
//		for(int cout=0; count <5; count++) {
//		Set<Integer> lotto = new TreeSet<>();	
		
		while(lotto.size()<6) {
		int number = random.nextInt(45) + 1;      //44까지나오니 + 1함
		lotto.add(number);
		}
		
		System.out.println(lotto);
		
		// 연급복권: 1-5조 0~9 중복 허용가능한 6자리수 5조588526
		List<Integer> annuity = new ArrayList<>();
		
		int jo = random.nextInt(5) +1;
		annuity.add(jo);
		
		for (int count =0 ; count <6 ; count++) {
			int number1 = random.nextInt(10);
			annuity.add(number1);
		}
		
		System.out.println(annuity);
		
		// Date 클래스: 날짜를 다루는 클래스
		// Date 클래스의 대부분의 메서드는 JDK 1.1 부터 사용하지 않도록 권장하고 있음
		
		//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
		Date dateNow= new Date(); 
	
		System.out.println(dateNow);
		System.out.println(dateNow.getDate()); // 안씀
		
		//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
		// LocalDateTime 클래스: JDK 8 버전 이후부터 Date 클래스를 대체하기 위해 만들어진 클래스
		// LocalDate 클래스 , LocalTime 클래스 , LocalDateTime 클래스 3가지
		
		// 현재 날짜 및 시간의 읜스턴스 생성
		LocalDateTime now = LocalDateTime.now();
		System.out.println(now);
		// 특정 날짜 및 시간의 인스턴스 생성
		LocalDateTime date1 = LocalDateTime.of(2024, 01, 18, 9, 00, 00);
		System.out.println(date1);
		
		// 특정 요소 가져오기 getXXX()
		int year = now.getYear();
		System.out.println(year);
		int month = now.getMonthValue();
		System.out.println(month);
		int day = now.getDayOfMonth();
		System.out.println(day);
		
		Month month1 = now.getMonth();
		System.out.println(month1);
		// 특정 요소 변경하기
		// 변경한 값을 반환 함
		now = now.withYear(2025).withHour(15);
		System.out.println(now);
		
		// 날짜 계산하기
		// 특정 요소에 값을 더하거나 빼기 pluse() / minus()
		now = now.plusMonths(2).minusDays(15);
		System.out.println(now);
		
		//LocalDateTime을 Date 클래스로 변경하는 것
		Date localTodate = Date.from(now.atZone(ZoneId.systemDefault()).toInstant());
		System.out.println(localTodate);
		
		// Date - >  String 
		// SimpleDateFormat 클래스를 사용하여 지정한 포맷으로 문자열으로 변경
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat();
		String dateString = simpleDateFormat.format(localTodate);
		System.out.println(dateString);
		
		// y : 연도, M : 월, d : 날짜, a : 오전오후, H : 시간(24) , h : 시간(12), m : 분 , s : 초 , E : 요일
		simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		dateString = simpleDateFormat.format(localTodate);
		System.out.println(dateString);
		
		//localDateTime -> String
		dateString = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss"));
		System.out.println(dateString);
		
		
	}

}
