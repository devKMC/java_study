package ch03; //8일차 2

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class B_Package {

	public static void main(String[] args) {
		
		// Wrapper 클래스: 기본형 데이터 타입을 참조형 데이터 타입으로 다룰 수 있도록 하는 클래스
		// 일반적으로 기본형 데이터 타입의 풀네임에 첫글자를 대문자로 지정하면 Wrapper 클래스가 됨
		
		Integer wrapperInt = 10;
		Double wrapperDouble = 10.0;
		Boolean wrapperBoolean = false;
		String wrapperString = "String";
		
		// 자주 사용하는 기능
		// parse 메서드: 문자열을 특정 타입으로 반환 
		int number = Integer.parseInt("123"); 
		// toStirng 메서드: 특정 타입의 값을 문자열로 변환
		String string = Integer.toString(123);  //0 초과 정수를 입력할때 자리의 수는
												//몇개 고 각 숫자는 몇을 의미하는가? 를출력
		
		// 1234567890
		
		//10개 
		
		//1의자리는 뭐다 1: 0 
		//2의자리는 뭐다 10 : 9
		//10자리까지
		
		//"8" 아스키코드 56이면 8임 
		
		// Collection Framework: java에서 데이터 구조에 대한 표준화된 기법을 제공
		
		// List: 데이터를 저장할 때 중복 허용하고 순서가 존재함 (인덱스로 접근가능)
		List<Integer> arrayList; //int[] arrayList; 비슷한 느낌
		// ArrayList: List 중에서 내부 배열을 사용하여 인덱스를 사용한 검색이 빠릅니다
		arrayList = new ArrayList<>(); // 자주 쓰는 것 //{} 이순간에서는 길이가 0
		System.out.println(arrayList);
		arrayList.add(10);
		System.out.println(arrayList);
		// LinkedList: 이중 연결 기법을 사용하여 추가, 삭제가 빠름
//		arrayList = new LinkedList<>();// 자주 쓰지 않는 것
		
		// add(): List에 요소를 추가하는 것
		// 추가할 요소의 데이터 타입은 반드시 제너릭으로 지정한 타입으로만 지정 가능
		arrayList.add(20);
		arrayList.add(30);// 이순간에서는 길이가 1개에 값을 10가지는 것
		System.out.println(arrayList);
//		arrayList.add(""); // 타입을 object를 사용하면 문자열도 사용 가능하다
		
		// get(): List 의 특정 인덱스 요소에 접근
		// List 인덱스 범위를 초과하는 인덱스를 지정할 수 없음
		// 기본형 데이터타입의 변수로 반환값을 받을 경우 null 값을 받을 수 있음을 주의
		int arrayElement = arrayList.get(0); //0번 인덱스값을 가져오는 코드
		System.out.println(arrayElement);
		
		// set(): List의 특정 인덱스 요소를 변경하는 것
		// List 인덱스 범위를 초과하는 인덱스를 지정할 수 없음
		arrayList.set(1, -99);
		System.out.println(arrayList);
		
		// remove():List 의 특정 요소를 삭제하는 것
		arrayList.remove(0);
		System.out.println(arrayList);
		
		// size(): List  의 길이를 반환 //배열에서는 length
		System.out.println(arrayList.size());
		
		// Set: 데이터를 저장할 때 중복을 허용하지 않고 순서가 존재하지 않음 ( 집합 )
		Set<String> set;       //제너릭 형태로 지정
		// HashSet: 해싱 기법을 사용해서 검색속도가 빠름
//		set = new HashSet<>();
		// TreeSet: 요소를 정렬해서 추가하는 방법
		set = new TreeSet<>();
		
		//add(): set에 요소를 추가하는 것. 단 , 동일한 요소가 이미 추가되어 있다면 추가하지 않음
		set.add("Banana");
		System.out.println(set);	
		set.add("Apple");
		System.out.println(set);
		set.add("Banana1");			// 중복된 값은 추가되지 않음
		System.out.println(set);
		
		// remove(): set에서 특정 요소를 제거
		// 제거하고자 하는 요소가 없더라도 예외가 발생하지 않음
		set.remove("Apple");
		System.out.println(set);
		
		// contains() Set에서 특정 요소가 존재하는지 확인
		System.out.println(set.contains("Apple"));
		System.out.println(set.contains("Banana"));
		
		// Map: 키와 값이 한쌍으로 이루어진 요소들의 집합, 키는 중복 불가능 , 값은 중복 가능
		Map<String, String>map;
		// HashMap: 해싱 기법으로 키의 검색 속도가 빠름
//		map = new HashMap<>();
		// TreeMap: 키를 정렬하여 저장
		map = new TreeMap<>();
		
		// 해시맵 
		// put(): Map 에 키와 값을 추가
		// 만약 동일한 키가 존재한다면 해당 키의 값을 변경
		map.put("Apple", "사과");	// 애플과 사과는 전부 스트링 타입 (위에서 지정함)
		System.out.println(map);
		map.put("Banana", "바나나");
		System.out.println(map);
		map.put("Apple", "링고");	// 수정이 가능하다
		System.out.println(map);
		map.put("Banana1", "바나나"); // 키는 중복될 수 없으나 값은 동일해도 상관없음
		System.out.println(map);
		
		//get(): Map에서 특정 키를 가지는 요소를 반환
		//존재하지 않는 키로 검색할 경우 null 반환
		System.out.println(map.get("Apple"));
		System.out.println(map.get("Apple1"));
		
		// remove(): Map 에서 특정 키를 가지는 요소를 제거합니다.
		// remove 젝업에 성공하면 해당 키의 값을 반환
		map.remove("Apple");
		System.out.println(map);
		
		System.out.println(map.remove("Banana"));
		
		class Human {
			String name;
			String address;
		}
		
		Human human1 = new Human();
		human1.name = "홍길동";
		human1.address = "부산광역시 진구";
		//name = "홍길동"
		//address = "부산광역시 진구"
		Map<String, String> human2 = new HashMap<>();
		human2.put("name", "홍길동");
		human2.put("address", "부산광역시 진구");
		
		human2.get(human2);
	}
}
